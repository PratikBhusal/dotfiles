" Essentials {{{ ---------------------------------------------------------------
set nocompatible
set showcmd
set hlsearch
set autoindent
set nostartofline
set confirm
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif
nnoremap <TAB> <C-^>
" Return to last edit position
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
let s:linux = has('unix') && !has('macunix') && !has('win32unix')
let s:windows = has('win32') || has('win64')
" }}} --------------------------------------------------------------------------

" Vim Plugin Installation {{{ --------------------------------------------------
" Vim-Plug automatic download {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" }}}

call plug#begin('~/.vim/bundle')
" Add my own plugins :D
if isdirectory(expand("$HOME/.vim/plugin-projects/vim-osplugin"))
    Plug '~/.vim/plugin-projects/vim-osplugin'
else
    Plug 'PratikBhusal/vim-osplugin'
endif

if !has('nvim')
    "add vim sensible
    Plug 'tpope/vim-sensible'
endif
" if s:windows
"     " Add tag generation
"     " Plug 'xolox/vim-easytags'
"     " Plug 'xolox/vim-misc'
"     " Plug 'xolox/vim-shell'
"     " C++ Autocompletion
"     Plug 'Rip-Rip/clang_complete'
" endif
if s:linux
    " Autocompletion
    Plug 'Valloric/YouCompleteMe' | Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
endif
"add molokai colorscheme
Plug 'tomasr/molokai'
"add vim-airline & themes
Plug 'bling/vim-airline' | Plug 'vim-airline/vim-airline-themes'
"add indent lines
Plug 'Yggdroot/indentLine'
"add utilisnips and snippets
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
"add EasyMotion
Plug 'easymotion/vim-easymotion'
"add Git Support
Plug 'tpope/vim-fugitive' | Plug 'airblade/vim-gitgutter'
"add cSyntaxAfter
Plug 'PratikBhusal/cSyntaxAfter'
"add better c++ syntax highlighting
Plug 'octol/vim-cpp-enhanced-highlight'
"add enhanced python synthax
Plug 'hdima/python-syntax'
"add vim-hardtime to force learn vim movements
Plug 'takac/vim-hardtime'
"CtrlP- Fuzzy Finding PLugin
Plug 'ctrlpvim/ctrlp.vim'
"automatically add closed bracekets and braces
Plug 'jiangmiao/auto-pairs'
"Add a commenting plugin
Plug 'tpope/vim-commentary'
" Add better cwindow support
Plug 'romainl/vim-qf'

" Plugins for consideration {{{
" Add neocomplete. Better AutoComplPop & Ultisnips compatibility.
" TODO: Get the settings configured to my likings
" Plug 'Shougo/neocomplete.vim'

" add vim-lightline. Will eventually replace vim-airline
" Plug 'itchyny/lightline.vim'

" Add VimCompletesMe. Alternative to SuperTab. I may use in the future.
" Plug 'ajh17/VimCompletesMe'

" Add SuperTab. Alternative to VimCompletesMe. I may use in the future.
" Plug 'ervandew/supertab'

" Built-in markdown support
" Plug 'suan/vim-instant-markdown'

" Visual whitespace detection
" Plug 'ntpeters/vim-better-whitespace'
" }}}

" on demand loading of NERD Tree
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
call plug#end()
call  osplugin#initilize()
"  }}} -------------------------------------------------------------------------

" Change location of temporary files {{{ ---------------------------------------
set undodir=~/.vim/.cache/.undo//
set backupdir=~/.vim/.cache/.backup//
set directory=~/.vim/.cache/.swp//

if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
"  1}}} ------------------------------------------------------------------------

" Live the Vim Life {{{ --------------------------------------------------------
inoremap <up> <nop>
vnoremap <up> <nop>
inoremap <down> <nop>
vnoremap <down> <nop>
inoremap <left> <nop>
vnoremap <left> <nop>
inoremap <right> <nop>
vnoremap <right> <nop>
"  }}} -------------------------------------------------------------------------

" Auto Update at save {{{ ------------------------------------------------------
augroup reload_vimrc " {
autocmd!
autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }
" }}} --------------------------------------------------------------------------

" Windows heterogeneous OS compatibilty {{{ ------------------------------------
" if g:windows
"     set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
"     set runtimepath+=$Home/.vim/after
" endif
" }}} --------------------------------------------------------------------------

" Lazy Kebindings {{{ ----------------------------------------------------------
let mapleader = ' '
nnoremap ; :
command! WQ wq
command! Wq wq
command! W w
command! Q q
inoremap <C-c> <Esc>
set autochdir
autocmd BufEnter * silent! lcd %:p:h
" }}} --------------------------------------------------------------------------

" Forced use of more efficient movement commands {{{ ---------------------------
let g:hardtime_default_on = 1
" }}} --------------------------------------------------------------------------

" Text Wrapping & Border Config {{{ --------------------------------------------
set tw=80
execute "set colorcolumn=" .join(range(81,999), ',')
" }}} --------------------------------------------------------------------------

" Sorting {{{ ------------------------------------------------------------------
nnoremap <leader>s vip:!sort<cr>
vnoremap <leader>s :!sort<cr>
" }}} --------------------------------------------------------------------------

" Make things look nice {{{ ----------------------------------------------------
set shortmess=at
syntax on
set hidden
set number
set relativenumber
set mousehide
" set guioptions-=m  "remove menubar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
let g:indent_guides_guide_size= 2
set background=dark
"Colorscheme Choice
colorscheme molokai
if !has("gui_running")
    let g:rehash256 = 1
endif
set encoding=utf-8
" Delete Trailing Whitespace
" autocmd BufWritePre * %s/\s\+$//e
" }}} --------------------------------------------------------------------------

" Change how the cursor looks {{{ ----------------------------------------------
set guicursor=c-i-ci:ver15-Cursor/lCursor
set guicursor=v:hor15-Cursor/lCursor
" }}} --------------------------------------------------------------------------

" Make searching less tedious (Without it put \c (insen) or \C (sen) at end) {{{
set ignorecase
set smartcase
" }}} --------------------------------------------------------------------------

" Set tab intent to 4 spaces {{{ -----------------------------------------------
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
" }}} --------------------------------------------------------------------------

" Folding {{{ ------------------------------------------------------------------
"set foldmethod=marker
"set foldlevelstart=1
nnoremap <silent> \ @=(foldlevel('.')?'za':"\\")<CR>
augroup folding
  au BufReadPre * setlocal foldmethod=indent
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=marker | endif
augroup END
" }}} --------------------------------------------------------------------------

" Syntax Highlight Settings {{{ ------------------------------------------------
let python_highlight_all = 1
"autocmd! FileType c,cpp,java,php call CSyntaxAfter()
autocmd! FileType c,java,php call CSyntaxAfter()
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
" }}} --------------------------------------------------------------------------

" Autocompletion {{{ -----------------------------------------------------------
setlocal completeopt+=noinsert
" autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
inoremap <C-@> <C-Space>
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" }}} --------------------------------------------------------------------------

" Plugin Configs {{{ -----------------------------------------------------------
source $HOME/.vim/configs/Plugins.vim
" }}} --------------------------------------------------------------------------
