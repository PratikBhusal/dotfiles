" Essentials {{{ ---------------------------------------------------------------
set encoding=utf-8
scriptencoding utf-8

let g:windows = has('win32') || has('win64')
let g:cygwin  = has('unix') && has('win32unix')
let g:linux   = has('unix') && !has('macunix') && !has('win32unix')
let g:macOS   = has('macunix')
" Essentials }}} ---------------------------------------------------------------

" Follow XDG Directory Specification {{{ ---------------------------------------
if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif
" if empty($MYVIMRC) | let $MYVIMRC = "$XDG_CONFIG_HOME/vim/vimrc"| endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif


set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

" set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath^=$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_CONFIG_HOME."/vim/spell", 'p', 0700)
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p', 0700)

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)

if !has('nvim') " Neovim has its own special location
  set viminfofile=$XDG_CACHE_HOME/vim/viminfo
endif
" Follow XDG Directory Specification }}} ---------------------------------------

let g:plugin_manager = plugin_manager#init()

" Auto Update at save {{{ ------------------------------------------------------
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END " }
" Auto Update at save }}} ------------------------------------------------------

" Windows heterogeneous OS compatibilty {{{ ------------------------------------
" if g:windows
"     set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
"     set runtimepath+=$Home/.vim/after
" endif
" }}} --------------------------------------------------------------------------

" Lazy Kebindings {{{ ----------------------------------------------------------
autocmd BufEnter * silent! lcd %:p:h
command! Q q
command! W w
command! WQ wq
command! Wq wq
" inoremap <expr> jk pumvisible() ? "<C-e>" : "<Esc>"
let g:mapleader = "\<Space>"
let g:maplocalleader = "\<Space>"
nnoremap <SPACE> <Nop>
nnoremap ; :
set autochdir
set mouse=a
cabbrev ex Ex
cabbrev vimtutor view $HOME/.vim/vimtutor
" set gdefault " no need to include g flag in substitutions
" Lazy Kebindings }}} ----------------------------------------------------------

" Text Wrapping & Border Config {{{ --------------------------------------------
set textwidth=80
execute 'set colorcolumn=' . join(range(&textwidth + 1,120), ',')
" Text Wrapping & Border Config }}} --------------------------------------------

" Sorting {{{ ------------------------------------------------------------------
nnoremap <leader>s vip:!sort<cr>
vnoremap <leader>s :!sort<cr>
" Sorting }}} ------------------------------------------------------------------

" Make things look nice {{{ ----------------------------------------------------
set shortmess=atcI
set list " Display whitespace
" set listchars+=eol:Â¬
syntax on
set hidden
set number
set relativenumber
set mousehide
set guioptions-=m  "remove menubar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
try
    " set diffopt+=iwhiteall " Ignore whitespace
    set diffopt+=hiddenoff " Turn off diff mode when there is only 1 diff window
catch /^Vim\%((\a\+)\)\=:E474/
endtry
set linespace=0
let g:indent_guides_guide_size= 2
set background=dark
" autocmd BufWritePre * %s/\s\+$//e " Delete Trailing Whitespace
" Make things look nice }}} ----------------------------------------------------

" Custom colors for colorscheme {{{ --------------------------------------------
let g:darkokai#debug = 1

if ( has('vcon') || has('termguicolors') ) &&
    \ (&term !=# 'rxvt-unicode-256color')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

" Custom colors for colorscheme }}} --------------------------------------------

" Change how the cursor looks {{{ ----------------------------------------------
set guicursor=c-i-ci:ver15-Cursor/lCursor
set guicursor=v:hor15-Cursor/lCursor
" Change how the cursor looks }}} ----------------------------------------------

" Make searching less tedious (Without it put \c (insen) or \C (sen) at end) {{{
set ignorecase smartcase
" Make searching less tedious (Without it put \c (insen) or \C (sen) at end) }}}

" Set tab intent to 4 spaces {{{ -----------------------------------------------
set tabstop=8 expandtab smarttab
set softtabstop=4 shiftwidth=4
" Set tab intent to 4 spaces }}} -----------------------------------------------

" Folding {{{ ------------------------------------------------------------------
nnoremap <silent> \ @=(foldlevel('.')?'za':"\\")<CR>
augroup folding
  au BufReadPre * setlocal foldmethod=indent
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=marker | endif
augroup END

set foldmethod=marker " Fold on marker
" set foldclose=all     " Close folds if you leave them in any way
set foldenable        " Turn on folding
set foldlevel=0       " Autofold everything by default
" Folding }}} ------------------------------------------------------------------

" Autocompletion {{{ -----------------------------------------------------------
if has('patch-7.4.775')
    set completeopt+=noinsert
endif

augroup auto_quickfix_window
    autocmd!
    autocmd CompleteDone * if pumvisible() == 0|silent! pclose|endif
    " autocmd QuickFixCmdPost [^l]* nested cwindow
    " autocmd QuickFixCmdPost    l* nested lwindow
augroup END

inoremap <C-@> <C-Space>
" inoremap <expr> <silent> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <silent> <expr>  <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <silent> <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" Autocompletion }}} -----------------------------------------------------------

" Window Focus {{{ -------------------------------------------------------------

" Line Number {{{
augroup LineNumber
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal number relativenumber
  au WinLeave * setlocal nonumber norelativenumber
augroup END
" Line Number }}}

" " CursorLine {{{
" augroup CursorLine
"   au!
"   au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"   au WinLeave * setlocal nocursorline
" augroup END
" " CursorLine }}}

" Window Focus }}} -------------------------------------------------------------

" wildignore settings {{{ ------------------------------------------------------
" Temporary & Vim Files
set wildignore+=*/tmp/*,*\\tmp\\*,*.swp

" Zipped Files
set wildignore+=*.zip

" Compiled Files
set wildignore+=*.exe,*.so

if executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
" Wildignore Settings }}} ------------------------------------------------------

" Fillchars {{{
set fillchars=
exec 'set fillchars+=vert:' . nr2char('0x2503', 'utf-8')
exec 'set fillchars+=fold:' . nr2char('0x2500', 'utf-8')
exec 'set fillchars+=diff:' . nr2char('0x2500', 'utf-8')
if has('nvim') || has('patch-8.2.2508')
    exec 'set fillchars+=eob:\' . nr2char('0x20', 'utf-8')
endif
" Fillchars }}}

" Coc.nvim bandadge fixes {{{
autocmd FileType json syntax match Comment +\/\/.\+$+
" Coc.nvim bandadge fixes }}}

" Miscellaneous Quality of Life {{{ --------------------------------------------
set noshowmode
set showcmd
set hlsearch
set autoindent
set nostartofline
set confirm
set fileformat=unix
set fileformats=unix,dos
set noerrorbells novisualbell t_vb=
set splitright " new vertical splits are on the right
" set splitbelow " new horizontal splits are on the bottom
nnoremap <silent> <TAB> :bnext<cr>
" Return to last edit position
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
  \ |   exe "normal! g`\""
  \ | endif

" Detected Filetypes {{{
augroup FiletypesDetected
    autocmd!
augroup END
" Detected Filetypes }}}

if exists('&emoji')
    set noemoji
endif
" Miscellaneous Quality of Life }}} --------------------------------------------